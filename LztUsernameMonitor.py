import requests
import time
import json
import os
from datetime import datetime, timezone, timedelta
from typing import Optional, Dict, Any
import sys

class LolzteamUsernameMonitor:
    def __init__(self):
        self.api_base = "https://prod-api.lolz.live"
        self.session = requests.Session()
        self.config_file = "username_monitor_config.json"
        self.log_file = "username_monitor.log"
        
    def log_message(self, message: str, level: str = "INFO"):
        timestamp = datetime.now(timezone(timedelta(hours=3))).strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"[{timestamp}] [{level}] {message}"
        print(log_entry)
        with open(self.log_file, "a", encoding="utf-8") as f:
            f.write(log_entry + "\n")
    
    def save_config(self, config: Dict[str, Any]):
        with open(self.config_file, "w", encoding="utf-8") as f:
            json.dump(config, f, indent=4, ensure_ascii=False)
    
    def load_config(self) -> Optional[Dict[str, Any]]:
        if os.path.exists(self.config_file):
            with open(self.config_file, "r", encoding="utf-8") as f:
                return json.load(f)
        return None
    
    def setup_configuration(self):
        print("=" * 60)
        print("üîß LOLZTEAM USERNAME MONITOR - –ù–ê–°–¢–†–û–ô–ö–ê")
        print("=" * 60)
        
        config = {}
        
        print("\nüìã –®–∞–≥ 1: API —Ç–æ–∫–µ–Ω")
        while True:
            token = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API —Ç–æ–∫–µ–Ω: ").strip()
            if token:
                config["api_token"] = token
                break
            print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        
        print("\nüë§ –®–∞–≥ 2: –í–∞—à User ID")
        while True:
            try:
                user_id = int(input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à User ID: ").strip())
                config["user_id"] = user_id
                break
            except ValueError:
                print("‚ùå User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        
        print("\nüéØ –®–∞–≥ 3: –ñ–µ–ª–∞–µ–º—ã–π —é–∑–µ—Ä–Ω–µ–π–º")
        while True:
            username = input("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —é–∑–µ—Ä–Ω–µ–π–º: ").strip()
            if username:
                config["target_username"] = username
                break
            print("‚ùå –Æ–∑–µ—Ä–Ω–µ–π–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        
        print("\n‚è±Ô∏è –®–∞–≥ 4: –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏")
        while True:
            try:
                interval = int(input("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–º–∏–Ω–∏–º—É–º 1): ").strip())
                if interval >= 1:
                    config["check_interval"] = interval
                    break
                print("‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã!")
            except ValueError:
                print("‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        
        print("\nüìÖ –®–∞–≥ 5: –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã")
        print("1. –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–Ω–∞—á–∞—Ç—å —Å–µ–π—á–∞—Å)")
        print("2. –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ (–Ω–∞—á–∞—Ç—å —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –¥–∞—Ç—ã)")
        
        while True:
            mode = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1 –∏–ª–∏ 2): ").strip()
            if mode == "1":
                config["mode"] = "continuous"
                config["start_time"] = None
                break
            elif mode == "2":
                config["mode"] = "scheduled"
                print("\nüìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ (UTC+3):")
                while True:
                    try:
                        date_str = input("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è (YYYY-MM-DD HH:MM): ").strip()
                        start_time = datetime.strptime(date_str, "%Y-%m-%d %H:%M")
                        start_time = start_time.replace(tzinfo=timezone(timedelta(hours=3)))
                        config["start_time"] = start_time.isoformat()
                        break
                    except ValueError:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD HH:MM")
                break
            else:
                print("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ 1 –∏–ª–∏ 2!")
        
        self.save_config(config)
        
        print("\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        print(f"üéØ –¶–µ–ª—å: {config['target_username']}")
        print(f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: {config['check_interval']} —Å–µ–∫")
        if config['mode'] == 'scheduled':
            print(f"üìÖ –°—Ç–∞—Ä—Ç: {config['start_time']}")
        else:
            print("üîÑ –†–µ–∂–∏–º: –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
        
        return config
    
    def test_api_connection(self, token: str, user_id: int) -> bool:
        headers = {
            "Authorization": f"Bearer {token}",
            "Content-Type": "application/json"
        }
        
        try:
            response = self.session.get(f"{self.api_base}/users/{user_id}", headers=headers)
            if response.status_code == 200:
                self.log_message("‚úÖ API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                return True
            elif response.status_code == 401:
                self.log_message("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API —Ç–æ–∫–µ–Ω", "ERROR")
                return False
            elif response.status_code == 404:
                self.log_message("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", "ERROR")
                return False
            else:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}", "ERROR")
                return False
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}", "ERROR")
            return False
    
    def check_username_availability(self, token: str, user_id: int, username: str) -> Dict[str, Any]:
        headers = {
            "Authorization": f"Bearer {token}",
            "Content-Type": "application/json"
        }
        
        data = {"username": username}
        
        try:
            response = self.session.put(f"{self.api_base}/users/{user_id}", headers=headers, json=data)
            
            result = {
                "status_code": response.status_code,
                "success": False,
                "message": "",
                "response_data": None
            }
            
            try:
                response_data = response.json()
                result["response_data"] = response_data
            except:
                result["response_data"] = response.text
            
            if response.status_code == 200:
                result["success"] = True
                result["message"] = "üéâ –Æ–ó–ï–†–ù–ï–ô–ú –£–°–ü–ï–®–ù–û –ó–ê–ù–Ø–¢!"
                self.log_message(f"üéâ SUCCESS! –Æ–∑–µ—Ä–Ω–µ–π–º '{username}' —É—Å–ø–µ—à–Ω–æ –∑–∞–Ω—è—Ç!", "SUCCESS")
                
            elif response.status_code == 400:
                if isinstance(result["response_data"], dict):
                    if "errors" in result["response_data"]:
                        errors = result["response_data"]["errors"]
                        if "username" in errors:
                            if "taken" in str(errors["username"]).lower():
                                result["message"] = f"‚ùå –Æ–∑–µ—Ä–Ω–µ–π–º '{username}' —É–∂–µ –∑–∞–Ω—è—Ç"
                            elif "invalid" in str(errors["username"]).lower():
                                result["message"] = f"‚ùå –Æ–∑–µ—Ä–Ω–µ–π–º '{username}' –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º"
                            else:
                                result["message"] = f"‚ùå –û—à–∏–±–∫–∞ —é–∑–µ—Ä–Ω–µ–π–º–∞: {errors['username']}"
                        else:
                            result["message"] = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {errors}"
                    else:
                        result["message"] = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å (400)"
                else:
                    result["message"] = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å (400)"
                    
            elif response.status_code == 401:
                result["message"] = "‚ùå –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω"
                
            elif response.status_code == 403:
                if isinstance(result["response_data"], dict):
                    if "errors" in result["response_data"]:
                        errors = result["response_data"]["errors"]
                        if isinstance(errors, list) and len(errors) > 0:
                            error_msg = errors[0]
                            if "–∑–∞–Ω—è—Ç" in error_msg.lower():
                                result["message"] = f"‚è≥ –Æ–∑–µ—Ä–Ω–µ–π–º '{username}' –ø–æ–∫–∞ –∑–∞–Ω—è—Ç (–æ–∂–∏–¥–∞–Ω–∏–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è)"
                            else:
                                result["message"] = f"‚ùå {error_msg}"
                        else:
                            result["message"] = f"‚ùå –û—à–∏–±–∫–∞: {errors}"
                    else:
                        result["message"] = "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"
                else:
                    result["message"] = "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"
                
            elif response.status_code == 404:
                result["message"] = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                
            elif response.status_code == 429:
                result["message"] = "‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ - –æ–∂–∏–¥–∞–Ω–∏–µ"
                
            elif response.status_code >= 500:
                result["message"] = f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ({response.status_code})"
                
            else:
                result["message"] = f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ ({response.status_code})"
            
            return result
            
        except requests.exceptions.RequestException as e:
            return {
                "status_code": 0,
                "success": False,
                "message": f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}",
                "response_data": None
            }
    
    def wait_for_scheduled_time(self, start_time_str: str):
        target_time = datetime.fromisoformat(start_time_str)
        current_time = datetime.now(timezone(timedelta(hours=3)))
        
        if current_time >= target_time:
            self.log_message("üìÖ –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–æ, –Ω–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
            return
        
        time_diff = (target_time - current_time).total_seconds()
        self.log_message(f"‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ {target_time.strftime('%Y-%m-%d %H:%M:%S')} (UTC+3)")
        self.log_message(f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {int(time_diff)} —Å–µ–∫—É–Ω–¥")
        
        while current_time < target_time:
            time.sleep(min(60, time_diff))
            current_time = datetime.now(timezone(timedelta(hours=3)))
            time_diff = (target_time - current_time).total_seconds()
            
            if time_diff > 0:
                if time_diff > 3600:
                    hours = int(time_diff // 3600)
                    minutes = int((time_diff % 3600) // 60)
                    self.log_message(f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {hours}—á {minutes}–º")
                elif time_diff > 60:
                    minutes = int(time_diff // 60)
                    self.log_message(f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {minutes}–º")
                else:
                    self.log_message(f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {int(time_diff)}—Å")
    
    def monitor_username(self, config: Dict[str, Any]):
        self.log_message("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —é–∑–µ—Ä–Ω–µ–π–º–∞")
        self.log_message(f"üéØ –¶–µ–ª—å: {config['target_username']}")
        self.log_message(f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: {config['check_interval']} —Å–µ–∫")
        
        if not self.test_api_connection(config["api_token"], config["user_id"]):
            self.log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API", "ERROR")
            return
        
        if config["mode"] == "scheduled" and config["start_time"]:
            self.wait_for_scheduled_time(config["start_time"])
        
        self.log_message("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...")
        
        attempt_count = 0
        success = False
        
        try:
            while not success:
                attempt_count += 1
                
                self.log_message(f"üîç –ü–æ–ø—ã—Ç–∫–∞ #{attempt_count}: –ø—Ä–æ–≤–µ—Ä–∫–∞ '{config['target_username']}'")
                
                result = self.check_username_availability(
                    config["api_token"],
                    config["user_id"],
                    config["target_username"]
                )
                
                if result["success"]:
                    self.log_message(result["message"], "SUCCESS")
                    self.log_message(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ—Å–ª–µ {attempt_count} –ø–æ–ø—ã—Ç–æ–∫!", "SUCCESS")
                    success = True
                    break
                else:
                    self.log_message(result["message"])
                    
                    if result["status_code"] == 429:
                        self.log_message("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥ –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞...")
                        time.sleep(60)
                    elif result["status_code"] == 0:
                        self.log_message("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏...")
                        time.sleep(30)
                    elif result["status_code"] >= 500:
                        self.log_message("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞...")
                        time.sleep(10)
                    else:
                        time.sleep(config["check_interval"])
                
        except KeyboardInterrupt:
            self.log_message("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            self.log_message(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", "ERROR")
    
    def run(self):
        print("üéØ LOLZTEAM USERNAME MONITOR")
        print("=" * 40)
        
        config = self.load_config()
        
        if config is None:
            print("üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
            config = self.setup_configuration()
        else:
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞!")
            print(f"üéØ –¶–µ–ª—å: {config['target_username']}")
            print(f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: {config['check_interval']} —Å–µ–∫")
            
            choice = input("\n1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n2. –ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å\n–í—ã–±–æ—Ä (1/2): ").strip()
            
            if choice == "2":
                config = self.setup_configuration()
        
        print("\n" + "="*40)
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        self.monitor_username(config)

if __name__ == "__main__":
    monitor = LolzteamUsernameMonitor()
    monitor.run()
